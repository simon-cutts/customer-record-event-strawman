AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: customer-record written with aws-serverless-java-container spring boot

Globals:
  Api:
    # API Gateway regional endpoints
    EndpointConfiguration: REGIONAL

Resources:
  # Lambda entry point for the SpringBoot app
  CustomerRecordFunc:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.sighware.customer.StreamLambdaHandler::handleRequest
      Runtime: java8
      CodeUri: build/distributions/serverless-event-sourcing.zip
      MemorySize: 1024
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref CustomersDynamoDBTable
        - DynamoDBCrudPolicy:
            TableName: !Ref EventsDynamoDBTable
      Timeout: 60
      Events:
        GetResource:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: any

  # Lambda listens to a DynamoDB stream on the EventsDynamoDBTable and writes the
  # data to KinesisStream
  ProcessDynamoDBStream:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.sighware.customer.stream.DynamoDbStreamProcessor::handleRequest
      Runtime: java8
      CodeUri: build/distributions/serverless-event-sourcing.zip
      MemorySize: 1024
      Environment:
        Variables:
          KINESIS_STREAM_NAME: !Ref KinesisStream
      Policies:
        - AWSLambdaDynamoDBExecutionRole
        - KinesisCrudPolicy:
            StreamName: !Ref KinesisStream
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt EventsDynamoDBTable.StreamArn
            BatchSize: 1
            StartingPosition: TRIM_HORIZON

  # Lambda listens to KinesisStream and writes the events to the S3 EventBucket
  # Normally this lambda would be in a separate project as it is a client of the event stream. Only included
  # here for illustration purposes :-)
  ProcessKinesisStreamS3:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.sighware.customer.stream.KinesisStreamS3Processor::handleRequest
      Runtime: java8
      CodeUri: build/distributions/serverless-event-sourcing.zip
      MemorySize: 1024
      Environment:
        Variables:
          BUCKET_NAME: !Ref EventBucket
      Policies:
        - KinesisStreamReadPolicy:
            StreamName: !Ref KinesisStream
        - S3CrudPolicy:
            BucketName: !Ref EventBucket
      Events:
        Stream:
          Type: Kinesis
          Properties:
            #Stream: !GetAtt KinesisStream.Arn
            Stream: !GetAtt StreamConsumer.ConsumerARN
            BatchSize: 1
            StartingPosition: TRIM_HORIZON

  CustomersDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: customerId
          AttributeType: S
      KeySchema:
        - AttributeName: customerId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: Customer

  EventsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: customerId
          AttributeType: S
        - AttributeName: createTime
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: CreateTimeIdx
          KeySchema:
            - AttributeName: createTime
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      KeySchema:
        - AttributeName: customerId
          KeyType: HASH
        - AttributeName: createTime
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      TableName: CustomerEvent

  KinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: CustomerEventKinesisStream
      ShardCount: 1

  # HTTP/2 stream consumer please see:
  #     https://docs.aws.amazon.com/streams/latest/dev/introduction-to-enhanced-consumers.html
  StreamConsumer:
    Type: AWS::Kinesis::StreamConsumer
    Properties:
      StreamARN: !GetAtt KinesisStream.Arn
      ConsumerName: CustomerEventStreamConsumer

  EventBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: serverless-strawman-customer-event

Outputs:
  CustomerRecordFuncApi:
    Description: URL for application
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/customer'
    Export:
      Name: CustomerRecordFuncApi
  EventsDynamoDBTable:
    Description: "DynamoDB Events table"
    Value: !GetAtt EventsDynamoDBTable.StreamArn
  StreamARN:
    Description: "Kinesis Stream ARN"
    Value: !GetAtt KinesisStream.Arn
  ConsumerARN:
    Description: "Stream consumer ARN"
    Value: !GetAtt StreamConsumer.ConsumerARN

